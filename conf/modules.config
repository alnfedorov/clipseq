/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {
    // publishDir = [
    //    path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
    //    mode: params.publish_dir_mode,
    //    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    //]

    withName: CHECK_SAMPLESHEET {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:FASTQ_TRIM_FASTP_FASTQC:FASTQC_RAW|.*:FASTQ_TRIM_FASTP_FASTQC:FASTQC_TRIM' {
        ext.args   = '--quiet'
        cpus = check_max( 2, 'cpus' )
        memory =  { check_max( 2.GB * task.attempt, 'memory'  ) }
    }

    withName: '.*:FASTQ_TRIM_FASTP_FASTQC:FASTQC_RAW' {
        publishDir = [
            path: { "${params.outdir}/fastqc/raw-reads/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:FASTQ_TRIM_FASTP_FASTQC:FASTQC_TRIM' {
        publishDir = [
            path: { "${params.outdir}/fastqc/trimmed-reads/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:FASTQ_TRIM_FASTP_FASTQC:FASTP' {
        cpus = check_max( 6, 'cpus' )
        memory =  { check_max( 6.GB * task.attempt, 'memory' ) }
        ext.args   = params.extra_fastp_args ?: ''
        publishDir = [
            [
                path: { "${params.outdir}/fastp" },
                mode: params.publish_dir_mode,
                pattern: "*.{json,html}"
            ],
            [
                path: { "${params.outdir}/fastp/log" },
                mode: params.publish_dir_mode,
                pattern: "*.log"
            ],
        ]
    }

    withName: '.*STAR_GENOMEGENERATE.*' {
        cpus = check_max( 32, 'cpus')
        memory =  { check_max( 64.GB * task.attempt, 'memory' ) }
        publishDir = [
            path: { "${params.outdir}/index/STAR/${task.tag}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_index
        ]
    }

    withName: STAR_ALIGN_RNALIB {
        ext.args   = [
            '--outFilterMultimapNmax 999',
            '--outSAMmultNmax 10',
            '--outFilterMultimapScoreRange 0',
            '--outFilterMismatchNmax 3',
            '--outSAMattributes All',
            '--alignIntronMax 1',
            '--alignEndsType EndToEnd',
            '--outSAMtype BAM Unsorted',
            '--readFilesCommand zcat',
            '--outReadsUnmapped Fastx'
        ].flatten().unique(false).join(' ').trim()
        cpus = check_max( 32, 'cpus' )
        memory =  { check_max( 32.GB * task.attempt, 'memory'  ) }
        publishDir = [
            [
                path: { "${params.outdir}/alignment/rnalib/log/" },
                mode: params.publish_dir_mode,
                pattern: '*.{out,tab}'
            ],
            [
                path: { "${params.outdir}/alignment/rnalib/" },
                mode: params.publish_dir_mode,
                pattern: '*.{fastq.gz,bam}'
            ]
        ]
    }

    withName: STAR_ALIGN_GENOME {
        ext.args   = [
            '--outFilterMultimapNmax 999',
            '--outSAMmultNmax 10',
            '--outFilterMultimapScoreRange 1',
            '--outFilterMismatchNmax 3',
            '--outSAMattributes All',
            '--alignEndsType EndToEnd',
            '--outSAMtype BAM Unsorted',
            '--readFilesCommand zcat',
            '--alignSJDBoverhangMin 1',
            '--outFilterType BySJout',
            '--outReadsUnmapped Fastx'
        ].flatten().unique(false).join(' ').trim()
        cpus = check_max( 32, 'cpus' )
        memory =  { check_max( 32.GB * task.attempt, 'memory'  ) }
        publishDir = [
            [
                path: { "${params.outdir}/alignment/genome/log/" },
                mode: params.publish_dir_mode,
                pattern: '*.{out,tab}'
            ],
            [
                path: { "${params.outdir}/alignment/genome/" },
                mode: params.publish_dir_mode,
                pattern: '*.{fastq.gz,bam}'
            ]
        ]
    }

    withName: NMS {
        cpus = check_max( 8, 'cpus' )
        memory =  { check_max( 16.GB * task.attempt, 'memory'  ) }
        maxRetries = 2
        publishDir = [
            [
                path: { "${params.outdir}/alignment/nms/log/" },
                mode: params.publish_dir_mode,
                pattern: '*_mqc.yml'
            ],
            [
                path: { "${params.outdir}/alignment/nms/" },
                mode: params.publish_dir_mode,
                pattern: '*.bam*',
            ]
        ]
    }

    withName: UMITOOLS_DEDUP {
        ext.args   = { [
            meta.single_end                 ? '' : '--unpaired-reads=discard --chimeric-pairs=discard',
            params.umitools_grouping_method ? "--method='${params.umitools_grouping_method}'" : '',
            params.umitools_umi_separator   ? "--umi-separator='${params.umitools_umi_separator}'" : ''
        ].join(' ').trim() }
        ext.prefix = { "${meta.id}.nms.dedup" }
        cpus = 1
        memory =  { check_max( 16.GB * task.attempt, 'memory'  ) }
        publishDir = [
            [
                path: { "${params.outdir}/alignment/dedup/log/" },
                mode: params.publish_dir_mode,
                pattern: '*.log'
            ],
            [
                path: { "${params.outdir}/alignment/dedup/stats/" },
                mode: params.publish_dir_mode,
                pattern: '*.tsv'
            ],
            [
                path: { "${params.outdir}/alignment/dedup/" },
                mode: params.publish_dir_mode,
                pattern: '*.bam',
            ]
        ]
    }

    withName: '.*ALIGN_NMS_DEDUP:SAMTOOLS_INDEX' {
        cpus = 1
        memory =  { check_max( 500.MB * task.attempt, 'memory'  ) }
        publishDir = [
            path: { "${params.outdir}/alignment/dedup/" },
            mode: params.publish_dir_mode,
            pattern: "*.bai"
        ]
    }
    
    withName: '.*:FIX_BAM_FLAGS_TAGS' {
        cpus = 8
        memory =  { check_max( 16.GB * task.attempt, 'memory'  ) }
        publishDir = [
            path: { "${params.outdir}/alignment/final/" },
            mode: params.publish_dir_mode,
            pattern: "*.{bam,bai}"
        ]
    }

    withName: 'MAKE_XLINK_TRACKS' {
        cpus = 1
        memory =  { check_max( 4.GB * task.attempt, 'memory'  ) }
        publishDir = [
            [
                path: { "${params.outdir}/xlinks/xln" },
                mode: params.publish_dir_mode,
                pattern: "*.xln.bedgraph.gz"
            ],
            [
                path: { "${params.outdir}/xlinks/xpm" },
                mode: params.publish_dir_mode,
                pattern: "*.xpm.bedgraph.gz"
            ]
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: MULTIQC {
        ext.args   = params.multiqc_title ? "--title \"$params.multiqc_title\"" : ''
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}
